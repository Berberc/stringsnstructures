Dokumentation zu diesem Projekt
(damit man nachvollziehen kann was vor sich geht...)
*************************************************

1. Schritt:
XML einlesen
	- zentrale Klasse: SAXHandler
	- XML-Knoten werden besucht und ihre Werte in eigene Datenstruktur überführt
	- Datenstruktur: Klasse SuffixTreeInfo enthält alles
		-> Anzahl Knoten des ST
		-> Anzahl Types (=Dokumente)
		-> Liste Types (Types werden über ihre IDs (0,1,2,3,...) referenziert und auch sortiert)
	
---
2. Schritt:
Vektorerzeugung
	- jeder Type (Dokument) hat einen Vektor bzw. wird durch diesen repräsentiert
	- Vektor besteht aus N Dimensionen (N=Anzahl der Knoten des ST)
		-> jede Dimension hat als Wert tf-idf des zugehörigen Knotens
	- tf-idf wird in Klasse TfIdfFeatures berechnet anhand Type(d), Corpus und Node(n)
		-> tf(n,d) 		= Anzahl, wie oft Dokument d Knoten n durchlaufen hat
		-> df(n) 		= Anzahl verschiedener Dokumente, die den Knoten durchlaufen haben
		-> idf(n,d) 	= log(1+(M/df)) (M=Anzahl Types, kommt aus Corpus)
		-> tfidf(n,d) 	= (1+log(tf)) * idf
	
---
3. Schritt:
Clustering

a) hierarchisch (group-average)
	- Klasse HierarchicalClustering
	- bottom-up: zuerst wird pro Type 1 Cluster erzeugt
	- Berechnung gemittelter paarweiser Distanz für alle Cluster
	- sukzessive merge Cluster mit niedrigster Distanz
	- es ergibt sich eine binäre Clusterstruktur (als Dendrogramm darstellbar)
	- TODO: Haltekriterium?

b) Neighbor Joining
	- erfordert eigentlich additive Matrix
	- Berechnung Distanzmatrix für alle Types
	- Berechnung einer Zwischenmatrix mit Netto-Divergenzen
	- ...
	
	
---
4. Schritt:
Evaluation

a) manuell
	- Ausgabe der Clusterstruktur als DOT-Graph
	- inspektion der Cluster

b) automatisch
	- ?
